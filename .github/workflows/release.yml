name: Release

on:
  push:
    tags:
      - "*"
env:
  CROSS_CONTAINER_ENGINE: podman
  
jobs:
  crates-io:
    runs-on: ubuntu-latest
    permissions:
      deployments: write
    steps:
        - uses: actions/checkout@v4

        - uses: chrnorm/deployment-action@v2
          name: Create GitHub deployment
          id: deployment
          with:
            token: "${{ github.token }}"
            log-url: https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}
            environment: crates.io

        - name: Update deployment status (in_progress)
          uses: chrnorm/deployment-status@v2
          with:
            token: '${{ github.token }}'
            environment-url: ${{ steps.deployment.outputs.environment_url }}
            deployment-id: ${{ steps.deployment.outputs.deployment_id }}
            state: 'in_progress'
            
        - uses: actions-rs/toolchain@v1
          with:
              toolchain: stable
              override: true

        - uses: katyo/publish-crates@v2
          with:
              registry-token: ${{ secrets.CARGO_REGISTRY_TOKEN }}
              
        - name: Update deployment status (success)
          if: success()
          uses: chrnorm/deployment-status@v2
          with:
            token: '${{ github.token }}'
            environment-url: ${{ steps.deployment.outputs.environment_url }}
            deployment-id: ${{ steps.deployment.outputs.deployment_id }}
            state: 'success'

        - name: Update deployment status (failure)
          if: failure()
          uses: chrnorm/deployment-status@v2
          with:
            token: '${{ github.token }}'
            environment-url: ${{ steps.deployment.outputs.environment_url }}
            deployment-id: ${{ steps.deployment.outputs.deployment_id }}
            state: 'failure'

  ghcr:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write
      deployments: write
    steps:
        - uses: actions/checkout@v4
        - name: Process version of the tag
          id: version
          uses: ncipollo/semantic-version-action@v1
        - uses: chrnorm/deployment-action@v2
          name: Create GitHub deployment
          id: deployment
          with:
            token: "${{ github.token }}"
            log-url: https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}
            environment: ghcr
        
        # Install the cosign tool except on PR
        # https://github.com/sigstore/cosign-installer
        - name: Install cosign
          uses: sigstore/cosign-installer@4959ce089c160fddf62f7b42464195ba1a56d382

        - name: Install qemu dependency
          run: |
            sudo apt-get update
            sudo apt-get install -y qemu-user-static

        # Login against a container registry
        - name: Log into registry ghcr.io
          uses: redhat-actions/podman-login@v1
          with:
            registry: ghcr.io
            username: ${{ github.actor }}
            password: ${{ github.token }}

        - name: Update deployment status (in_progress)
          if: success()
          uses: chrnorm/deployment-status@v2
          with:
            token: '${{ github.token }}'
            environment-url: ${{ steps.deployment.outputs.environment_url }}
            deployment-id: ${{ steps.deployment.outputs.deployment_id }}
            state: 'in_progress'
        - name: Buildah Action
          id: build-image
          uses: redhat-actions/buildah-build@v2
          with:
            containerfiles: |
              Containerfile
            platforms: linux/amd64,linux/arm64
            image: ghcr.io/${{ github.repository }}
            tags: ${{ steps.version.outputs.tag }}

        - name: Wait for crates.io deployment succeed 
          uses: lewagon/wait-on-check-action@v1.3.4
          with:
            ref: ${{ github.ref }}
            check-name: crates-io
            repo-token: ${{ github.token }}
            wait-interval: 20

        - name: Push container image
          id: push-container-image
          uses: redhat-actions/push-to-registry@v2
          with:
            image: ${{ steps.build-image.outputs.image }}
            tags: ${{ steps.build-image.outputs.tags }}
            registry: ghcr.io
            username: ${{ github.actor }}
            password: ${{ github.token }}
          # Sign the resulting Docker image digest except on PRs.
          # This will only write to the public Rekor transparency log when the Docker
          # repository is public to avoid leaking data.  If you would like to publish
          # transparency data even for private images, pass --force to cosign below.
          # https://github.com/sigstore/cosign
        - name: Sign the published Docker image
          env:
            COSIGN_EXPERIMENTAL: "true"
          # This step uses the identity token to provision an ephemeral certificate
          # against the sigstore community Fulcio instance.
          run: cosign sign ghcr.io/${{ github.repository }}@${{ steps.push-container-image.outputs.digest }}

        - name: Update deployment status (success)
          if: success()
          uses: chrnorm/deployment-status@v2
          with:
            token: '${{ github.token }}'
            environment-url: ${{ steps.deployment.outputs.environment_url }}
            deployment-id: ${{ steps.deployment.outputs.deployment_id }}
            state: 'success'

        - name: Update deployment status (failure)
          if: failure()
          uses: chrnorm/deployment-status@v2
          with:
            token: '${{ github.token }}'
            environment-url: ${{ steps.deployment.outputs.environment_url }}
            deployment-id: ${{ steps.deployment.outputs.deployment_id }}
            state: 'failure'
  create-binary-deployment:
    name: Create binary deployment
    runs-on: ubuntu-latest
    permissions:
      deployments: write
    outputs:
      environment_url: ${{ steps.deployment.outputs.environment_url }}
      deployment_id: ${{ steps.deployment.outputs.deployment_id }}
    steps:
      - uses: chrnorm/deployment-action@v2
        name: Create GitHub deployment
        id: deployment
        with:
          token: "${{ github.token }}"
          log-url: https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}
          environment: gh-release-binaries
      - name: Update deployment status (in_progress)
        uses: chrnorm/deployment-status@v2
        with:
          token: '${{ github.token }}'
          environment-url: ${{ steps.deployment.outputs.environment_url }}
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}
          state: 'in_progress'
  build-binaries:
    needs: [create-binary-deployment]
    name: Build binaries
    permissions:
      deployments: write
    strategy:
      matrix:
        include:
          # linux x86
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            use-cross: false
            output: peek-reverse-proxy
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            use-cross: true
            output: peek-reverse-proxy
          # linux aarch64
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            use-cross: true
            output: peek-reverse-proxy
          - target: aarch64-unknown-linux-musl
            os: ubuntu-latest
            use-cross: true
            output: peek-reverse-proxy
          # windows 
          - target: aarch64-pc-windows-msvc
            os: windows-latest
            use-cross: false
            output: peek-reverse-proxy.exe
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            use-cross: false
            output: peek-reverse-proxy.exe

          # macos
          - target: aarch64-apple-darwin
            os: macos-latest
            use-cross: false
            output: peek-reverse-proxy
          - target: x86_64-apple-darwin
            os: macos-latest
            use-cross: false
            output: peek-reverse-proxy
    
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4

    - name: Configure toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target:  ${{ matrix.target }}
        override: true
    
    - name: Build release
      uses: actions-rs/cargo@v1
      with:
        command: build
        args: --target ${{ matrix.target }} --release
        use-cross: ${{ matrix.use-cross }}
    
    - name: Copy and rename utility
      run: cp target/${{ matrix.target }}/release/${{ matrix.output }} ${{ matrix.output }}
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: peek-reverse-proxy-${{ matrix.target }}
        path: ${{ matrix.output }}
    - name: Update deployment status (failure)
      if: failure()
      uses: chrnorm/deployment-status@v2
      with:
        token: '${{ github.token }}'
        environment-url: ${{ needs.create-binary-deployment.outputs.environment_url }}
        deployment-id: ${{ needs.create-binary-deployment.outputs.deployment_id }}
        state: 'failure'

  upload-binaries:
    name: Publish binaries
    needs: [build-binaries, crates-io, create-binary-deployment]
    runs-on: ubuntu-latest
    permissions:
      deployments: write
      contents: write
    strategy:
      matrix:
        target:
         - x86_64-unknown-linux-gnu
         - x86_64-unknown-linux-musl
         - aarch64-unknown-linux-gnu
         - aarch64-unknown-linux-musl
         - aarch64-pc-windows-msvc
         - x86_64-pc-windows-msvc
         - aarch64-apple-darwin
         - x86_64-apple-darwin
    steps:
    - uses: actions/download-artifact@v4
      with:
        name: peek-reverse-proxy-${{ matrix.target }}

    - name: Compress (for win files)
      if: ${{ contains(matrix.target, 'windows') }}
      run: tar -cJf peek-reverse-proxy-${{ matrix.target }}.txz  peek-reverse-proxy.exe
    
    - name: Compress (for any other files)
      if: ${{ !contains(matrix.target, 'windows') }}
      run: tar -cJf peek-reverse-proxy-${{ matrix.target }}.txz  peek-reverse-proxy
    
    - name: Upload binary to release
      if: ${{ startsWith(github.ref, 'refs/tags/') }}
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ github.token }}
        file: peek-reverse-proxy-${{ matrix.target }}.txz
        asset_name: peek-reverse-proxy-${{ matrix.target }}.txz
        tag: ${{ github.ref }}
        overwrite: true
        prerelease: true
    - name: Update deployment status (failure)
      if: failure()
      uses: chrnorm/deployment-status@v2
      with:
        token: '${{ github.token }}'
        environment-url: ${{ needs.create-binary-deployment.outputs.environment_url }}
        deployment-id: ${{ needs.create-binary-deployment.outputs.deployment_id }}
        state: 'failure'
  finish-binary-deployment:
    needs: [create-binary-deployment, upload-binaries]
    runs-on: ubuntu-latest
    permissions:
      deployments: write
    steps:
      - name: Update deployment status (success)
        if: success()
        uses: chrnorm/deployment-status@v2
        with:
          token: '${{ github.token }}'
          environment-url: ${{ needs.create-binary-deployment.outputs.environment_url }}
          deployment-id: ${{ needs.create-binary-deployment.outputs.deployment_id }}
          state: 'success'
    